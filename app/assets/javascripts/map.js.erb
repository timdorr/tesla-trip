var map = new mapboxgl.Map({
  container: 'map',
  style: 'http://cdn.showcaseidx.com/mapbox/streets-v9.nofonts.json',
  center: [-77, 38]
})

var locationIcon = document.createElement('div')
locationIcon.className = 'location-icon'

var locationPulse = document.createElement('div')
locationPulse.className = 'location-pulse'
locationPulse.innerHTML = '<div class="pulse"></div>'

var carData = [], stateData = []
var carPathLayer
var carGeoJSON = { type: 'LineString', coordinates: [] }

var locationMarker      = new mapboxgl.Marker(locationIcon, { offset: [-8, -8] })
var locationMarkerPulse = new mapboxgl.Marker(locationPulse, { offset: [-25, -25] })

locationMarkerPulse.setLngLat([103, -89]).addTo(map);
locationMarker.setLngLat([103, -89]).addTo(map);

var progressLoaded = false;
var stateLoaded = false;
var statsLoaded = false;

var checkLoading = function() {
  if (progressLoaded && stateLoaded && !statsLoaded) {
    statsLoaded = true;
    $(".loading").fadeOut();
    $("#state").addClass("fadein");
  }
};

var addRouteLayer = function() {
  map.addSource("routePath", wrapGeoJson(routeGeoJSON))
  map.addLayer({
    id:     "routePath",
    type:   "line",
    source: "routePath",
    layout: { "line-join": "round", "line-cap":  "round" },
    paint:  { "line-opacity": 0.75, "line-color": "#6699ff", "line-width": 6 }
  })

  stopsGeoJSON.features.forEach(function(marker) {
    var markerDiv = document.createElement('div')
    markerDiv.className = 'marker marker-' + marker.properties['marker-symbol']

    new mapboxgl.Marker(markerDiv, { offset: [ -18, -45 ] })
      .setLngLat(marker.geometry.coordinates)
      .addTo(map)
  })

  var bounds = routeGeoJSON.coordinates.reduce(function(bounds, coord) {
    return bounds.extend(coord);
  }, new mapboxgl.LngLatBounds(routeGeoJSON.coordinates[0], routeGeoJSON.coordinates[0]))

  map.fitBounds(bounds, {
    padding: 100
  })
}

var loadTelemetry = function() {
  $.ajax({ dataType: "json", url: "/telemetry" }).done(function(carData) {
    var length = carData.length;

    for (var i = 0; i < length; i++) {
      carGeoJSON.coordinates.push([carData[i].lng, carData[i].lat]);
    }

    map.addSource("carPath", wrapGeoJson(carGeoJSON))
    map.addLayer({
      id:     "carPath",
      type:   "line",
      source: "carPath",
      layout: {"line-join": "round", "line-cap": "round"},
      paint:  {"line-dasharray": [5,10], "line-color": "#dd6600", "line-width": 3}
    })

    progressLoaded = true;
    checkLoading();
  });
};

var fetchState = function() {
  // Current state & location
  $.ajax({ dataType: "json", url: "/telemetry/state" }).done(function(stateData) {
    locationMarkerPulse.setLngLat([stateData.longitude, stateData.latitude]);
    locationMarker.setLngLat([stateData.longitude, stateData.latitude]);

    var stateDiv = $("#state");

    // Status
    stateDiv.find(".driving").toggleClass("hide", (stateData.shift_state == "P" || stateData.shift_state == null));
    stateDiv.find(".parked").toggleClass("hide", !(stateData.shift_state == "P" || stateData.shift_state == null));

    stateDiv.find(".charging").toggleClass("hide", !(stateData.charging_state == "Charging"));
    stateDiv.find(".battery").toggleClass("hide", (stateData.charging_state == "Charging"));

    // Driving
    stateDiv.find(".lat dd").text(stateData.latitude);
    stateDiv.find(".lng dd").text(stateData.longitude);
    stateDiv.find(".speed dd").text((stateData.speed || 0)+" MPH");

    // Charging
    stateDiv.find(".charge_rate dd").text(stateData.charge_rate+" MPH");
    stateDiv.find(".time_to_full dd").text(stateData.time_to_full_charge+" hours");
    stateDiv.find(".battery_level dd").text(stateData.battery_level+"%");
    stateDiv.find(".range dd").text(stateData.battery_range + " miles");

    // Climate
    if (stateData.outside_temp == null) stateDiv.find(".outside_temp").hide();
    else stateDiv.find(".outside_temp dd").text(Math.round((stateData.outside_temp * (9/5))+32)+"ยบ");
    if (stateData.inside_temp == null) stateDiv.find(".inside_temp").hide();
    else stateDiv.find(".inside_temp dd").text(Math.round((stateData.inside_temp * (9/5))+32)+"ยบ");
    if (stateData.outside_temp == null && stateData.inside_temp == null) stateDiv.find(".climate").hide();

    stateLoaded = true;
    checkLoading();

    setTimeout(fetchState, 30*1000);
  });
};

var socket;

var connectSocket = function() {
  socket = new WebSocket(socket_url);
  socket.onmessage = function(event) {
    var stateData = JSON.parse(event.data);
    var stateDiv = $("#state");

    locationMarkerPulse.setLatLng([stateData.latitude, stateData.longitude]);
    locationMarker.setLatLng([stateData.latitude, stateData.longitude]);

    stateDiv.find(".lat dd").text(stateData.latitude);
    stateDiv.find(".lng dd").text(stateData.longitude);
    stateDiv.find(".speed dd").text((stateData.speed || 0) + " MPH");
    stateDiv.find(".battery_level dd").text(stateData.battery_level + "%");
  };
};

map.on('load', function() {
  addRouteLayer();
  if ($(".loading").length == 1) {
    loadTelemetry();
    fetchState();
    connectSocket();
  }
})

function wrapGeoJson(geoJson) {
  return {
    type: 'geojson',
    data: {
      type:     "FeatureCollection",
      features: [{
        type:     "Feature",
        geometry: geoJson
      }]
    }
  }
}
